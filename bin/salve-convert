#!/usr/bin/env node
/* eslint-env node */
"use strict";

/* eslint-disable no-console, no-use-before-define */

require("amd-loader");
var temp = require("temp");
var sax = require("sax");
var path = require("path");
temp.track();

var prog = path.basename(process.argv[1]);

//
// Safety harness
//

function Fatal(msg) {
  this.name = "Fatal";
  this.message = msg;
}
Fatal.prototype = new Error();
Fatal.prototype.constructor = Fatal;

var terminating = false;
process.on("uncaughtException", function uncaughtException(ex) {
  // We don't want to handle exceptions that happen while we're terminating.
  if (terminating) {
    return;
  }

  terminating = true;
  if (ex instanceof Fatal) {
    process.stderr.write(prog + ": " + ex.message + "\n");
    process.exit(1);
  }
  else {
    if (!args || !args.keep_temp) {
      temp.cleanup(); // We need to do this ourselves...
    }
    throw ex;
  }
});

//
// The real logic begins here.
//

var salve = require("../");
var conversion = require("../lib/salve/conversion");
var datatypes = require("../lib/salve/datatypes");
var spawn = require("child_process").spawn;
var fs = require("fs");
var ArgumentParser = require("argparse").ArgumentParser;

var parser = new ArgumentParser({
  addHelp: true,
  description: "Converts a simplified RNG file to a JavaScript file " +
    "that salve can use.",
});

parser.addArgument(["--version"], {
  action: "version",
  version: salve.version,
  help: "Shows version number and exit.",
});

parser.addArgument(["--no-optimize-ids"], {
  help: "Do NOT optimize the identifiers used by references and definitions.",
  action: "storeTrue",
});

parser.addArgument(["--include-paths"], {
  help: "Include RNG node path information in the JavaScript file.",
  action: "storeTrue",
});

parser.addArgument(["--format-version"], {
  help: "Version number of the JavaScript format that the tool must produce.",
  type: Number,
  defaultValue: 3,
});

parser.addArgument(["--simplify-only"], {
  help: "Stop converting at the simplification stage.",
  action: "storeTrue",
});

parser.addArgument(["--simplified-input"], {
  help: "The input is as simplified RNG.",
  action: "storeTrue",
});

parser.addArgument(["--keep-temp"], {
  help: "Keep the temporary files around. Useful for diagnosis.",
  action: "storeTrue",
});

parser.addArgument(["-v", "--verbose"], {
  help: "Run verbosely.",
  action: "storeTrue",
});

parser.addArgument(["--timing"], {
  help: "Output timing information. Implies --verbose.",
  action: "storeTrue",
});

parser.addArgument(["--verbose-format"], {
  help: "Outputs a verbose version of the data, with actual class names " +
    "instead of numbers. Implies --no-optimize-ids. This format is cannot " +
    "be read by salve. It is meant for debugging purposes only.",
  action: "storeTrue",
});

parser.addArgument(["--allow-incomplete-types"], {
  help: "Without this flag, the conversion process will stop upon " +
    "encountering types that are not fully supported. Using this flag will " +
    "allow the conversion to happen. Use --allow-incomplete-types=quiet to" +
    " suppress all warnings about this.",
});


parser.addArgument(["input_path"]);
parser.addArgument(["output_path"]);

var args = parser.parseArgs();

if (args.timing) {
  args.verbose = true;
}

if (args.verbose_format) {
  args.no_optimize_ids = true;
}

if (args.format_version < 3) {
  throw new Fatal("can't produce format version " + args.format_version);
}

var tempDir;
var startTime;
if (args.simplified_input) {
  convert(args.input_path);
}
else {
  if (args.verbose) {
    console.log("Validating RNG...");
    if (args.timing) {
      startTime = new Date();
    }
  }

  // This is a bit of a hack. We want to make sure that the schema is a valid
  // RNG schema as per RNG specs. Running validation on our schema with a
  // schema that defines a valid schema sctructure does not trap import errors
  // or errors that are not expressible in a schema language. So we run jing
  // with our schema as the schema to use for validation and /dev/null as the
  // document to validate. This does catch errors but there is no clean way to
  // get jing to output only schema errors, hence what we have here.

  var child = spawn("jing", [args.input_path, "/dev/null"],
                    { stdio: ["ignore", "pipe", "ignore"] });

  var err = "";
  child.stdout.on("data", function stdout(data) {
    err += data;
  });

  child.on("close", function close(_status) {
    // Remove everything that has to do with /dev/null to avoid confusing
    // the user.
    err = err.replace(/\/dev\/null(.|[\r\n])*/, "");
    // Earlier versions would output this error instead of the above.
    err = err.replace(/fatal: Premature end of file\.\s*/, "");
    if (args.verbose) {
      process.stderr.write(err);
    }

    // Search for an actual schema error.
    if (err.length) {
      var msg = "error in schema";
      if (!args.verbose) {
        msg += "; run with --verbose to see what the problem was";
      }
      throw new Fatal(msg);
    }
    if (args.timing) {
      console.log("Validation delta: " + (new Date() - startTime));
    }
    simplify();
  });
}

var simplifyingStartTime;
function simplify() {
  // Grab the xsl files that form the simplification process, and store
  // these paths in ``steps``.
  if (args.verbose) {
    console.log("Simplifying...");
    if (args.timing) {
      simplifyingStartTime = new Date();
    }
  }

  var libPath = path.resolve(__dirname, path.join("..", "lib", "salve",
                                                   "rng-simplification"));
  var steps = fs.readdirSync(libPath);
  var stepRe = /^rng-simplification_step(\d*?).xsl$/;
  steps = steps.filter(function filter(file) {
    return file.match(stepRe);
  });

  // The filter step above ensures the regexp match.
  steps.sort(function cmp(a, b) {
    return parseInt(a.match(stepRe)[1]) -
      parseInt(b.match(stepRe)[1]);
  });

  steps = steps.map(function map(file) {
    var ret = { name: file, path: path.join(libPath, file) };
    if (file === "rng-simplification_step1.xsl") {
      ret.repeatWhen = function repeatWhen(outPath) {
        // We want to check whether we need to run the
        // step again to include more files.
        var incParser = new IncludeParser(sax.parser(true, { xmlns: true }));
        var data = fs.readFileSync(outPath).toString();
        try {
          incParser.saxParser.write(data).close();
        }
        catch (ex) {
          if (!(ex instanceof Found)) {
            throw ex;
          }
        }
        return incParser.found;
      };
      ret.repeat_no = 0;
    }
    return ret;
  });

  tempDir = temp.mkdirSync({ prefix: "salve-convert" });

  if (args.keep_temp) {
    temp.track(false);
    console.log("Temporary files in: " + tempDir);
  }

  executeStep(steps, 0, args.input_path, convert);
}

/**
 * @param {Integer} stepNo The index in <code>steps</code> of the
 * step we are running.
 * @param {String} inPath Path of the input file for this step.
 * @param {Function} after Callback to run after all steps.
 */
function executeStep(steps, stepNo, inPath, after) {
  if (stepNo >= steps.length) {
    after(inPath);
  }

  var step = steps[stepNo];
  var outBase = "out" + (stepNo + 1) +
        (step.repeatWhen ? ("." + (step.repeat_no + 1)) : "") +
        ".rng";
  var outPath = path.join(tempDir, outBase);
  var xsltproc = spawn("xsltproc", ["-o", outPath, "--stringparam",
                                    "originalDir",
                                    path.resolve(path.dirname(args.input_path))
                                    + "/",
                                    step.path, inPath],
                       { stdio: "inherit" });
  xsltproc.on("exit", function exit(status) {
    if (status) {
      throw new Fatal("xsltproc terminated with status: " + status);
    }

    if (!fs.existsSync(outPath)) {
      throw new Fatal("xsltproc step " + stepNo +
                      " failed to create output");
    }

    if (step.repeatWhen) {
      if (step.repeatWhen(outPath)) {
        step.repeat_no++;
        executeStep(steps, stepNo, outPath, after);
      }
    }

    executeStep(steps, stepNo + 1, outPath, after);
  });
}

/**
 * Meant to be used as the <code>after</code> call back for
 * <code>executeStep</code>. Performs the conversion from RNG to JS.
 *
 * @param {String} simplifiedPath Path pointing to the result of the
 * simplification.
 */
function convert(simplifiedPath) {
  if (args.timing) {
    console.log("Simplification delta: " + (new Date() -
                                            simplifyingStartTime));
  }

  if (args.simplify_only) {
    var xmllint = spawn("xmllint",
                        ["--format", "--output", args.output_path,
                         simplifiedPath],
                      { stdio: "inherit" });
    xmllint.on("exit", process.exit.bind(undefined, 0));
    return;
  }

  var convStartTime;
  if (args.verbose) {
    console.log("Transforming RNG to JavaScript...");
    if (args.timing) {
      convStartTime = new Date();
    }
  }

  var convParser = new conversion.ConversionParser(sax.parser(true,
                                                              { xmlns: true }));
  var walker;
  switch (args.format_version) {
  case 3:
    walker = new conversion.DefaultConversionWalker(
      args.format_version, args.include_paths, args.verbose_format);
    break;
  default:
    throw new Error("unknown version: " + args.format_version);
  }
  convParser.saxParser.write(
    fs.readFileSync(simplifiedPath).toString()).close();

  if (args.no_optimize_ids) {
    walker.walk(convParser.stack[0].children[0]);
    fs.writeFileSync(args.output_path, walker.output.join(""));
  }
  else {
    if (args.format_version === 3) {
      // Gather names
      var g = new conversion.NameGatherer();
      g.walk(convParser.stack[0].children[0]);
      var names = g.names;

      // Now assign new names with shorter new names being
      // assigned to those original names that are most
      // frequent.
      var sorted = Object.keys(names).map(function map(key) {
        return { key: key, freq: names[key] };
      });
      sorted.sort(function cmp(a, b) {
        // Yes, we want to sort in reverse order of frequency
        return b.freq - a.freq;
      });
      var id = 1;
      var newNames = {};
      sorted.forEach(function each(elem) {
        newNames[elem.key] = id++;
      });

      // Perform the renaming.
      var renamer = new conversion.Renamer(newNames);
      renamer.walk(convParser.stack[0].children[0]);

      var typeChecker = new conversion.DatatypeProcessor();
      try {
        typeChecker.walk(convParser.stack[0].children[0]);
      }
      catch (ex) {
        if (ex instanceof datatypes.ValueValidationError) {
          throw new Fatal(ex.message);
        }

        if (ex instanceof datatypes.ParameterParsingError) {
          throw new Fatal(ex.message);
        }

        throw ex;
      }

      if (typeChecker.warnings.length &&
          args.allow_incomplete_types !== "quiet") {
        process.stderr.write(
          prog + ": WARNING: the following incomplete types are " +
            "used in the schema: ");
        process.stderr.write(
          Object.keys(typeChecker.incomplete_types_used).join(", "));
        process.stderr.write("\n");
        process.stderr.write(prog + ": details follow\n");

        typeChecker.warnings.forEach(function each(x) {
          process.stderr.write(prog + ": " + x + "\n");
        });
        if (!args.allow_incomplete_types) {
          throw new Fatal(
            "use --allow-incomplete-types to convert a file " +
              "using these types");
        }
        else {
          process.stderr.write(prog + ": allowing as requested\n");
        }
      }

      walker.walk(convParser.stack[0].children[0]);
      fs.writeFileSync(args.output_path, walker.output.join(""));
    }
    else {
      throw new Fatal("unknown version: " + args.format_version);
    }
  }

  if (args.timing) {
    console.log("Conversion delta: " + (new Date() - convStartTime));
  }

  process.exit(0);
}

//
//  Misc utilities
//

// Exception used to terminate the sax parser early.
function Found() {
  Error.call(this, arguments);
}
Found.prototype = new Error();

function Parser(saxParser) {
  this.saxParser = saxParser;
  for (var name in this) {
    if (name.lastIndexOf("on", 0) === 0) {
      this.saxParser[name] = this[name].bind(this);
    }
  }
}

function IncludeParser(saxParser) {
  Parser.call(this, saxParser);
  this.found = false;
}

IncludeParser.prototype = new Parser();

IncludeParser.prototype.onopentag = function onopentag(node) {
  if (node.uri === "http://relaxng.org/ns/structure/1.0" &&
      (node.local === "include" || node.local === "externalRef")) {
    this.found = true;
    throw new Found();  // Stop early.
  }
};
