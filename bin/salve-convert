#!/usr/bin/env node

'use strict';

require("amd-loader");
var temp = require("temp");
temp.track();

//
// Safety harness
//

function Fatal(msg) {
    this.name = "Fatal";
    this.message = msg;
}
Fatal.prototype = new Error();
Fatal.prototype.constructor = Fatal;

var terminating = false;
process.on('uncaughtException', function (ex) {
    // We don't want to handle exceptions that happen while we're terminating.
    if (terminating)
        return;

    terminating = true;
    if (ex instanceof Fatal) {
        console.log(ex.message);
        process.exit(1);
    }
    else
        throw ex;
});

//
// The real logic begins here.
//

var salve = require("../");
var formats = require("../lib/salve/formats");
var patterns = require("../lib/salve/patterns");
var oop = require("../lib/salve/oop");
var spawn = require("child_process").spawn;
var path = require("path");
var fs = require("fs");
var ArgumentParser = require("argparse").ArgumentParser;

var parser = new ArgumentParser({
    addHelp: true,
    description: 'Converts a simplified RNG file to a JavaScript file '+
        'that salve can use.'});

parser.addArgument(['--version'], {
    action: 'version',
    version: salve.version,
    help: "Shows version number and exit."
});
parser.addArgument(["--no-optimize-ids"], {
    help: "Do NOT optimize the identifiers used by references and definitions.",
    action: "storeTrue"
});
parser.addArgument(["--include-paths"], {
    help: "Include RNG node path information in the JavaScript file.",
    action: "storeTrue"
});
parser.addArgument(["--format-version"], {
    help: "Version number of the JavaScript format that the tool must produce.",
    defaultValue: 1
});
parser.addArgument(["--simplify-only"], {
    help: "Stop converting at the simplification stage.",
    action: "storeTrue"
});
parser.addArgument(["--simplified-input"], {
    help: "The input is as simplified RNG.",
    action: "storeTrue"
});
parser.addArgument(["--keep-temp"], {
    help: "Keep the temporary files around. Useful for diagnosis.",
    action: "storeTrue"
});
parser.addArgument(["-v", "--verbose"], {
    help: "Run verbosely.",
    action: "storeTrue"
});


parser.addArgument(["input_path"]);
parser.addArgument(["output_path"]);

var args = parser.parseArgs();

// We can't optimize ids when the version is less than 1.
if (args.format_version < 1) {
    if (args.verbose)
        console.log("Cannot optimize ids for format version " +
                    args.format_version + "; turning off id optimization.");
    args.no_optimize_ids = true;
}

var temp_dir;
if (args.simplified_input)
    convert(args.input_path);
else {
    if (args.verbose)
        console.log("Validating RNG...");

    var relaxng_rng = path.resolve(__dirname,
                                   path.join("..", "lib", "salve",
                                             "relaxng.rng"));

    // This is a bit of a hack. We want to make sure that the schema
    // is a valid RNG schema as per RNG specs. Running an xmllint on
    // the schema with a schema that defines what an RNG schema should
    // look like does not trap import errors or errors that are not
    // expressible in a schema language. The tools trang and jing
    // could possibly be used but they are costly to run. So we run
    // xmllint with our schema as the schema to use for validation and
    // /dev/null as the document to validate. This does catch errors
    // but there is no clean way to get xmllint to output only schema
    // errors, hence what we have here.

    var child = spawn("xmllint", ["--relaxng", args.input_path,
                                  "/dev/null"],
                      {stdio: ['ignore', 'ignore', 'pipe']});

    var err = "";
    child.stderr.on('data', function (data) {
        err += data;
    });

    child.on('close', function (status) {
        // Remove everything that has to do with /dev/null to avoid confusing
        // the user.
        err = err.replace(/\/dev\/null(.|[\r\n])*/, '');
        if (args.verbose)
            process.stderr.write(err);

        // Search for an actual schema error.
        if (err.search(/Relax-NG parser error/) !== -1) {
            var msg = "error in schema";
            if (!args.verbose)
                msg += "; run with --verbose to see what the problem was";
            throw new Fatal(msg);
        }
        simplify();
    });
}

function simplify() {
    // Grab the xsl files that form the simplification process, and store
    // these paths in ``steps``.
    var lib_path = path.resolve(__dirname, path.join("..", "lib", "salve",
                                                     "rng-simplification"));
    var steps = fs.readdirSync(lib_path);
    var step_re = /^rng-simplification_step(\d*?).xsl$/;
    steps = steps.filter(function (file) {
        return file.match(step_re);
    });

    // The filter step above ensures the regexp match.
    steps.sort(function (a, b) {
        return parseInt(a.match(step_re)[1]) -
            parseInt(b.match(step_re)[1]);
    });

    steps = steps.map(function (file) {
        return path.join(lib_path, file);
    });

    if (args.verbose)
        console.log("Simplifying...");

    temp_dir = temp.mkdirSync({prefix: "salve-convert"});

    if (args.keep_temp) {
        temp.track(false);
        console.log("Temporary files in: " + temp_dir);
    }

    executeStep(steps, 0, args.input_path, convert);
}

/**
 * @param {Integer} step_no The index in <code>steps</code> of the
 * step we are running.
 * @param {String} in_path Path of the input file for this step.
 * @param {Function} after Callback to run after all steps.
 */
function executeStep(steps, step_no, in_path, after) {
    if (step_no >= steps.length)
        return after(in_path);

    var step = steps[step_no];
    var out_path = path.join(temp_dir, "out" + (step_no + 1) + ".rng");
    var child = spawn("xsltproc", ["-o", out_path, step, in_path],
                      {stdio: "inherit"});
    child.on('exit', function (status) {
        if (status)
            throw new Fatal("xsltproc terminated with status: " + status);

        if (!fs.existsSync(out_path))
            throw new Fatal("xsltproc step " + step_no +
                            " failed to create output");

        return executeStep(steps, step_no + 1, out_path, after);
    });
}

/**
 * Meant to be used as the <code>after</code> call back for
 * <code>executeStep</code>. Performs the conversion from RNG to JS.
 *
 * @param {String} simplified_path Path pointing to the result of the
 * simplification.
 */
function convert(simplified_path) {
    if (args.simplify_only) {
        var child = spawn("xmllint",
                          ["--format", "--output", args.output_path,
                           simplified_path],
                          {stdio: "inherit"});
        child.on('exit', process.exit.bind(undefined, 0));
        return;
    }

    if (args.verbose)
        console.log("Transforming RNG to JavaScript...");
    var xsltproc_args = ["--param", "output-version", args.format_version,
                         "-o", args.output_path,
                          path.resolve(__dirname,
                                       path.join("..", "lib", "salve",
                                                 "rng-to-js.xsl")),
                simplified_path];

    if (args.include_paths)
        xsltproc_args = ["--param", "output-paths",
                         "true()"].concat(xsltproc_args);

    var xsltproc = spawn("xsltproc",
                         xsltproc_args,
                         {stdio: "inherit"});

    var V1JSONWalker = formats.__protected.V1JSONWalker;
    function NameGatherer() {
        V1JSONWalker.apply(this, arguments);
        this.names = {};
    }
    oop.inherit(NameGatherer, V1JSONWalker);

    NameGatherer.prototype._processObject = function(array, ctor, args) {
        if (ctor === patterns.__protected.Ref ||
            ctor === patterns.__protected.Define) {
            var name = args[1];
            if (!(name in this.names))
                this.names[name] = 0;

            this.names[name]++;
        }
    };

    var constructors = [];
    (function () {
        var name_to_constructor = formats.__protected.name_to_constructor;
        var i = 0;
        while(name_to_constructor[i]) {
            constructors[i] = name_to_constructor[i];
            i++;
        }
    })();


    function Renamer(options, names) {
        V1JSONWalker.apply(this, [options]);
        this.names = names;
    }
    oop.inherit(Renamer, V1JSONWalker);

    Renamer.prototype._processObject = function(array, ctor, args) {
        if (ctor === patterns.__protected.Ref ||
            ctor === patterns.__protected.Define) {
            args[1] = this.names[args[1]];
        }

        if ((this.options & formats.__protected.OPTION_NO_PATHS) &&
            ctor !== patterns.__protected.EName)
            args = args.slice(1);

        return [constructors.indexOf(ctor)].concat(args);
    };

    Renamer.prototype._processArray = function(array) {
        return this._walkArray(array);
    };

    xsltproc.on('exit', function (status) {
        if (status)
            throw new Fatal("xsltproc terminated with status: " + status);

        if (!args.no_optimize_ids) {
            if (args.verbose)
                console.log("Optimizing ids...");
            var parsed = JSON.parse(fs.readFileSync(args.output_path));

            var version = parsed.v;
            if (version === 1) {
                // Gather names
                var g = new NameGatherer(parsed.o);
                g.walkObject(parsed.d);
                var names = g.names;

                // Now assign new names with shorter new names being
                // assigned to those original names that are most
                // frequent.
                var sorted = Object.keys(names).map(function (key) {
                    return {key: key, freq: names[key]};
                });
                sorted.sort(function(a, b) {
                    // Yes, we want to sort in reverse order of frequency
                    return b.freq - a.freq;
                });
                var id = 1;
                var new_names = {};
                sorted.forEach(function (elem) {
                    new_names[elem.key] = id++;
                });

                // Perform the renaming.
                var renamer = new Renamer(parsed.o, new_names);
                parsed.d = renamer.walkObject(parsed.d);

                // And save. We don't use ``JSON.stringify`` for the
                // topmost object because it is nice to have *this*
                // order when opening the file in an editor or using
                // ``less``.
                var to_write = '{"v":' + JSON.stringify(parsed.v) +
                        ',"o":' + JSON.stringify(parsed.o) +
                        ',"d":' + JSON.stringify(parsed.d) + '}';
                fs.writeFileSync(args.output_path, to_write);
            }
            else
                throw new Fatal("unknown converted version: " + version);
        }

        process.exit(0);
    });
}
